{"mappings":"ACEA,MAAM,EAAoB,SAAS,aAAa,CAAC,qBAC3C,EAAa,SAAS,aAAa,CAAC,aACpC,EAAU,SAAS,aAAa,CAAC,UACjC,EAAS,SAAS,aAAa,CAAC,SAChC,EAAU,SAAS,aAAa,CAAC,UACjC,EAAe,SAAS,aAAa,CAAC,kBACzB,SAAS,aAAa,CAAC,aAC1C,MAAM,EAAgB,SAAS,aAAa,CAAC,iBACvC,EAAgB,SAAS,aAAa,CAAC,QACvC,EAAmB,SAAS,aAAa,CAAC,sBAEhD,IAAI,EAAY,EAAE,CACd,EACF,EACA,EACA,EAAQ,EAEV,MAAM,EAAW,AAAC,IAChB,IAAM,EAAW,EAAM,EAAQ,GAC/B,CAAA,EAAc,KAAK,CAAC,KAAK,CAAG,CAAC,EAAE,EAAQ,CAAC,CAAC,AAC3C,EAEA,eAAe,IACb,IAAM,EAAS,EAAkB,KAAK,CAChC,EAAW,EAAW,KAAK,CAC3B,EAAQ,EAAQ,KAAK,CAErB,EAAM,CAAC,mCAAmC,EAAE,EAAO,UAAU,EAAE,EAAS,YAAY,EAAE,EAAM,cAAc,CAAC,CAE3G,EAAW,MAAM,MAAM,GAG7B,EAAY,AAFI,CAAA,MAAM,EAAS,IAAI,EAAnC,EAEoB,OAAO,CAE3B,WAAW,KACT,EAAa,SAAS,CAAC,GAAG,CAAC,QAC3B,EAAc,SAAS,CAAC,MAAM,CAAC,QAC/B,EAAe,EAEf,EAAgB,CAAS,CAAC,EAAE,CAC9B,EAAG,IACL,CAEA,MAAM,EAAkB,AAAC,IAEvB,AADqB,SAAS,aAAa,CAAC,kBAC/B,SAAS,CAAG,CAAC;IACxB,EAAE,EAAa,GAAG,EAAE,EAAU,MAAM,CAAC,CAAC,EAAE,EAAS,QAAQ,CAAC,CAAC,CAE7D,IAAM,EAAU,IACX,EAAS,iBAAiB,CAC7B,EAAS,cAAc,CAAC,QAAQ,GACjC,AACD,CAAA,EAAiB,SAAS,CAAG,GAE7B,EAAQ,IAAI,CAAC,IAAM,KAAK,MAAM,GAAK,IACnC,EAAQ,OAAO,CAAC,AAAC,IACf,EAAiB,SAAS,EAAI,CAAC;;yBAEV,EAAE,EAAO;;;;;MAK5B,CAAC,AACL,GAEA,IAAM,EAAa,SAAS,gBAAgB,CAAC,WAC7C,EAAW,OAAO,CAAC,AAAC,IAClB,EAAO,gBAAgB,CAAC,QAAS,KAC1B,EAAO,SAAS,CAAC,QAAQ,CAAC,aAC7B,EAAW,OAAO,CAAC,AAAC,IAClB,EAAO,SAAS,CAAC,MAAM,CAAC,WAC1B,GAEA,EAAO,SAAS,CAAC,GAAG,CAAC,YACrB,EAAU,QAAQ,CAAG,CAAA,EAEzB,EACF,GAGA,EADA,EAAO,EAAO,KAAK,CAErB,EAEM,EAAc,AAAC,IACnB,EAAQ,YAAY,KACd,GAAQ,GACV,EAAS,GACT,KAEA,GAEJ,EAAG,IACL,EAEM,EAAY,SAAS,aAAa,CAAC,WACnC,EAAU,SAAS,aAAa,CAAC,SAEvC,EAAU,gBAAgB,CAAC,QAAS,KAClC,GACF,GAEA,EAAQ,gBAAgB,CAAC,QAAS,KAChC,IACA,EAAU,KAAK,CAAC,OAAO,CAAG,OAC1B,EAAQ,KAAK,CAAC,OAAO,CAAG,MAC1B,GAEA,MAAM,EAAc,KAClB,cAAc,GACd,IAAM,EAAgB,SAAS,aAAa,CAAC,oBACzC,EAEE,AADW,EAAc,aAAa,CAAC,SAAS,SAAS,GAC9C,CAAS,CAAC,EAAe,EAAE,CAAC,cAAc,EACvD,IACA,EAAc,SAAS,CAAC,GAAG,CAAC,aAE5B,EAAc,SAAS,CAAC,GAAG,CAAC,aACN,SACnB,gBAAgB,CAAC,WACjB,OAAO,CAAC,AAAC,IAEN,EAAO,aAAa,CAAC,SAAS,SAAS,GACvC,CAAS,CAAC,EAAe,EAAE,CAAC,cAAc,EAE1C,EAAO,SAAS,CAAC,GAAG,CAAC,UAEzB,IAGkB,SACnB,gBAAgB,CAAC,WACjB,OAAO,CAAC,AAAC,IAEN,EAAO,aAAa,CAAC,SAAS,SAAS,GACvC,CAAS,CAAC,EAAe,EAAE,CAAC,cAAc,EAE1C,EAAO,SAAS,CAAC,GAAG,CAAC,UAEzB,GAGJ,AADmB,SAAS,gBAAgB,CAAC,WAClC,OAAO,CAAC,AAAC,IAClB,EAAO,SAAS,CAAC,GAAG,CAAC,UACvB,GACA,EAAU,KAAK,CAAC,OAAO,CAAG,OAC1B,EAAQ,KAAK,CAAC,OAAO,CAAG,MAC1B,EAEM,EAAe,KACf,EAAe,EAAU,MAAM,CAEjC,EAAgB,CAAS,CAAC,EAAA,EAAe,EAAE,EAE3C,GAEJ,EAEM,EAAmB,SAAS,aAAa,CAAC,oBAC1C,EAAa,SAAS,aAAa,CAAC,gBAEpC,EAAe,KACnB,EAAiB,SAAS,CAAC,MAAM,CAAC,QAClC,EAAc,SAAS,CAAC,GAAG,CAAC,QAC5B,EAAW,SAAS,CAAG,CAAC,WAAW,EAAE,EAAM,GAAG,EAAE,EAAU,MAAM,CAAC,CAAC,AACpE,CAEA,CAAA,EAAW,SAAS,CAAG,CAAC,WAAW,EAAE,EAAM,GAAG,EAAE,EAAU,MAAM,CAAC,CAAC,CAIlE,AAFmB,SAAS,aAAa,CAAC,YAE/B,gBAAgB,CAAC,QAAS,KACnC,OAAO,QAAQ,CAAC,MAAM,EACxB,GAEA,EAAQ,gBAAgB,CAAC,QAAS","sources":["<anon>","app.js"],"sourcesContent":["\"use strict\";\nconst questionsNumberEl = document.querySelector(\"#questions-amount\");\nconst categoryEl = document.querySelector(\"#category\");\nconst levelEl = document.querySelector(\"#level\");\nconst timeEl = document.querySelector(\"#time\");\nconst startEl = document.querySelector(\".start\");\nconst startDisplay = document.querySelector(\".start-display\");\nconst settingsEl = document.querySelector(\".settings\");\nconst gameDisplayEl = document.querySelector(\".game-display\");\nconst progressBarEl = document.querySelector(\".bar\");\nconst answersContainer = document.querySelector(\".answers-container\");\nlet questions = [];\nlet timer, time, currQuestion, score = 0;\nconst progress = (val)=>{\n    const percent = val / time * 100;\n    progressBarEl.style.width = `${percent}%`;\n};\nasync function triviaLaunch() {\n    const number = questionsNumberEl.value;\n    const category = categoryEl.value;\n    const level = levelEl.value;\n    const url = `https://opentdb.com/api.php?amount=${number}&category=${category}&difficulty=${level}&type=multiple`;\n    const response = await fetch(url);\n    const results = await response.json();\n    questions = results.results;\n    setTimeout(()=>{\n        startDisplay.classList.add(\"hide\");\n        gameDisplayEl.classList.remove(\"hide\");\n        currQuestion = 1;\n        displayQuestion(questions[0]);\n    }, 1000);\n}\nconst displayQuestion = (question)=>{\n    const questionText = document.querySelector(\".question-text\");\n    questionText.innerHTML = `\n    ${currQuestion} / ${questions.length} ${question.question}`;\n    const answers = [\n        ...question.incorrect_answers,\n        question.correct_answer.toString()\n    ];\n    answersContainer.innerHTML = \"\";\n    answers.sort(()=>Math.random() - 0.5);\n    answers.forEach((answer)=>{\n        answersContainer.innerHTML += `\n      <div class=\"answer\">\n      <span class=\"text\">${answer}</span>\n      <span class=\"checkbox\">\n        <span class=\"icon\">\\u{2713}</span>\n      </span>\n      </div>\n      `;\n    });\n    const answerWrap = document.querySelectorAll(\".answer\");\n    answerWrap.forEach((answer)=>{\n        answer.addEventListener(\"click\", ()=>{\n            if (!answer.classList.contains(\"checked\")) {\n                answerWrap.forEach((answer)=>{\n                    answer.classList.remove(\"selected\");\n                });\n                answer.classList.add(\"selected\");\n                btnSubmit.disabled = false;\n            }\n        });\n    });\n    time = timeEl.value;\n    launchTimer(time);\n};\nconst launchTimer = (time)=>{\n    timer = setInterval(()=>{\n        if (time >= 0) {\n            progress(time);\n            time--;\n        } else checkAnswer();\n    }, 1000);\n};\nconst btnSubmit = document.querySelector(\".submit\");\nconst btnNext = document.querySelector(\".next\");\nbtnSubmit.addEventListener(\"click\", ()=>{\n    checkAnswer();\n});\nbtnNext.addEventListener(\"click\", ()=>{\n    nextQuestion();\n    btnSubmit.style.display = \"flex\";\n    btnNext.style.display = \"none\";\n});\nconst checkAnswer = ()=>{\n    clearInterval(timer);\n    const clickedAnswer = document.querySelector(\".answer.selected\");\n    if (clickedAnswer) {\n        const answer = clickedAnswer.querySelector(\".text\").innerHTML;\n        if (answer === questions[currQuestion - 1].correct_answer) {\n            score++;\n            clickedAnswer.classList.add(\"correct\");\n        } else {\n            clickedAnswer.classList.add(\"incorrect\");\n            const correctAnswer = document.querySelectorAll(\".answer\").forEach((answer)=>{\n                if (answer.querySelector(\".text\").innerHTML === questions[currQuestion - 1].correct_answer) answer.classList.add(\"correct\");\n            });\n        }\n    } else {\n        const correctAnswer = document.querySelectorAll(\".answer\").forEach((answer)=>{\n            if (answer.querySelector(\".text\").innerHTML === questions[currQuestion - 1].correct_answer) answer.classList.add(\"correct\");\n        });\n    }\n    const answerWrap = document.querySelectorAll(\".answer\");\n    answerWrap.forEach((answer)=>{\n        answer.classList.add(\"checked\");\n    });\n    btnSubmit.style.display = \"none\";\n    btnNext.style.display = \"flex\";\n};\nconst nextQuestion = ()=>{\n    if (currQuestion < questions.length) {\n        currQuestion++;\n        displayQuestion(questions[currQuestion - 1]);\n    } else displayScore();\n};\nconst resultsDisplayEl = document.querySelector(\".results-display\");\nconst finalScore = document.querySelector(\".final-score\");\nconst displayScore = ()=>{\n    resultsDisplayEl.classList.remove(\"hide\");\n    gameDisplayEl.classList.add(\"hide\");\n    finalScore.innerHTML = `You scored ${score} / ${questions.length}`;\n};\nfinalScore.innerHTML = `You scored ${score} / ${questions.length}`;\nconst btnRestart = document.querySelector(\".restart\");\nbtnRestart.addEventListener(\"click\", ()=>{\n    window.location.reload();\n});\nstartEl.addEventListener(\"click\", triviaLaunch);\n\n//# sourceMappingURL=index.4b650744.js.map\n","\"use strict\";\n\nconst questionsNumberEl = document.querySelector(\"#questions-amount\");\nconst categoryEl = document.querySelector(\"#category\");\nconst levelEl = document.querySelector(\"#level\");\nconst timeEl = document.querySelector(\"#time\");\nconst startEl = document.querySelector(\".start\");\nconst startDisplay = document.querySelector(\".start-display\");\nconst settingsEl = document.querySelector(\".settings\");\nconst gameDisplayEl = document.querySelector(\".game-display\");\nconst progressBarEl = document.querySelector(\".bar\");\nconst answersContainer = document.querySelector(\".answers-container\");\n\nlet questions = [];\nlet timer,\n  time,\n  currQuestion,\n  score = 0;\n\nconst progress = (val) => {\n  const percent = (val / time) * 100;\n  progressBarEl.style.width = `${percent}%`;\n};\n\nasync function triviaLaunch() {\n  const number = questionsNumberEl.value;\n  const category = categoryEl.value;\n  const level = levelEl.value;\n\n  const url = `https://opentdb.com/api.php?amount=${number}&category=${category}&difficulty=${level}&type=multiple`;\n\n  const response = await fetch(url);\n  const results = await response.json();\n\n  questions = results.results;\n\n  setTimeout(() => {\n    startDisplay.classList.add(\"hide\");\n    gameDisplayEl.classList.remove(\"hide\");\n    currQuestion = 1;\n\n    displayQuestion(questions[0]);\n  }, 1000);\n}\n\nconst displayQuestion = (question) => {\n  const questionText = document.querySelector(\".question-text\");\n  questionText.innerHTML = `\n    ${currQuestion} / ${questions.length} ${question.question}`;\n\n  const answers = [\n    ...question.incorrect_answers,\n    question.correct_answer.toString(),\n  ];\n  answersContainer.innerHTML = \"\";\n\n  answers.sort(() => Math.random() - 0.5);\n  answers.forEach((answer) => {\n    answersContainer.innerHTML += `\n      <div class=\"answer\">\n      <span class=\"text\">${answer}</span>\n      <span class=\"checkbox\">\n        <span class=\"icon\">✓</span>\n      </span>\n      </div>\n      `;\n  });\n\n  const answerWrap = document.querySelectorAll(\".answer\");\n  answerWrap.forEach((answer) => {\n    answer.addEventListener(\"click\", () => {\n      if (!answer.classList.contains(\"checked\")) {\n        answerWrap.forEach((answer) => {\n          answer.classList.remove(\"selected\");\n        });\n\n        answer.classList.add(\"selected\");\n        btnSubmit.disabled = false;\n      }\n    });\n  });\n\n  time = timeEl.value;\n  launchTimer(time);\n};\n\nconst launchTimer = (time) => {\n  timer = setInterval(() => {\n    if (time >= 0) {\n      progress(time);\n      time--;\n    } else {\n      checkAnswer();\n    }\n  }, 1000);\n};\n\nconst btnSubmit = document.querySelector(\".submit\");\nconst btnNext = document.querySelector(\".next\");\n\nbtnSubmit.addEventListener(\"click\", () => {\n  checkAnswer();\n});\n\nbtnNext.addEventListener(\"click\", () => {\n  nextQuestion();\n  btnSubmit.style.display = \"flex\";\n  btnNext.style.display = \"none\";\n});\n\nconst checkAnswer = () => {\n  clearInterval(timer);\n  const clickedAnswer = document.querySelector(\".answer.selected\");\n  if (clickedAnswer) {\n    const answer = clickedAnswer.querySelector(\".text\").innerHTML;\n    if (answer === questions[currQuestion - 1].correct_answer) {\n      score++;\n      clickedAnswer.classList.add(\"correct\");\n    } else {\n      clickedAnswer.classList.add(\"incorrect\");\n      const correctAnswer = document\n        .querySelectorAll(\".answer\")\n        .forEach((answer) => {\n          if (\n            answer.querySelector(\".text\").innerHTML ===\n            questions[currQuestion - 1].correct_answer\n          ) {\n            answer.classList.add(\"correct\");\n          }\n        });\n    }\n  } else {\n    const correctAnswer = document\n      .querySelectorAll(\".answer\")\n      .forEach((answer) => {\n        if (\n          answer.querySelector(\".text\").innerHTML ===\n          questions[currQuestion - 1].correct_answer\n        ) {\n          answer.classList.add(\"correct\");\n        }\n      });\n  }\n  const answerWrap = document.querySelectorAll(\".answer\");\n  answerWrap.forEach((answer) => {\n    answer.classList.add(\"checked\");\n  });\n  btnSubmit.style.display = \"none\";\n  btnNext.style.display = \"flex\";\n};\n\nconst nextQuestion = () => {\n  if (currQuestion < questions.length) {\n    currQuestion++;\n    displayQuestion(questions[currQuestion - 1]);\n  } else {\n    displayScore();\n  }\n};\n\nconst resultsDisplayEl = document.querySelector(\".results-display\");\nconst finalScore = document.querySelector(\".final-score\");\n\nconst displayScore = () => {\n  resultsDisplayEl.classList.remove(\"hide\");\n  gameDisplayEl.classList.add(\"hide\");\n  finalScore.innerHTML = `You scored ${score} / ${questions.length}`;\n};\n\nfinalScore.innerHTML = `You scored ${score} / ${questions.length}`;\n\nconst btnRestart = document.querySelector(\".restart\");\n\nbtnRestart.addEventListener(\"click\", () => {\n  window.location.reload();\n});\n\nstartEl.addEventListener(\"click\", triviaLaunch);\n"],"names":["questionsNumberEl","document","querySelector","categoryEl","levelEl","timeEl","startEl","startDisplay","gameDisplayEl","progressBarEl","answersContainer","questions","timer","time","currQuestion","score","progress","val","percent","style","width","triviaLaunch","number","value","category","level","url","response","fetch","results","json","setTimeout","classList","add","remove","displayQuestion","question","questionText","innerHTML","length","answers","incorrect_answers","correct_answer","toString","sort","Math","random","forEach","answer","answerWrap","querySelectorAll","addEventListener","contains","btnSubmit","disabled","launchTimer","setInterval","checkAnswer","btnNext","nextQuestion","display","clearInterval","clickedAnswer","displayScore","resultsDisplayEl","finalScore","btnRestart","window","location","reload"],"version":3,"file":"index.4b650744.js.map"}